/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as Api from '../api/v2';
import { Headers } from '../../../framework';
import { Surface, Available } from './surface';
import { User } from './user';
import { Image, BasicCard, RichResponse, Suggestions, SimpleResponse } from './response';
import { Question } from './question';
import { Arguments } from './argument';
import { Device } from './device';
import { Input } from './input';
import { JsonObject } from '../../../common';
/** @public */
export declare type Intent = 'actions.intent.MAIN' | 'actions.intent.TEXT' | 'actions.intent.PERMISSION' | 'actions.intent.OPTION' | 'actions.intent.TRANSACTION_REQUIREMENTS_CHECK' | 'actions.intent.DELIVERY_ADDRESS' | 'actions.intent.TRANSACTION_DECISION' | 'actions.intent.CONFIRMATION' | 'actions.intent.DATETIME' | 'actions.intent.SIGN_IN' | 'actions.intent.NO_INPUT' | 'actions.intent.CANCEL' | 'actions.intent.NEW_SURFACE' | 'actions.intent.REGISTER_UPDATE' | 'actions.intent.CONFIGURE_UPDATES' | 'actions.intent.PLACE' | 'actions.intent.LINK';
export declare type InputValueSpec = 'type.googleapis.com/google.actions.v2.PermissionValueSpec' | 'type.googleapis.com/google.actions.v2.OptionValueSpec' | 'type.googleapis.com/google.actions.v2.TransactionRequirementsCheckSpec' | 'type.googleapis.com/google.actions.v2.DeliveryAddressValueSpec' | 'type.googleapis.com/google.actions.v2.TransactionDecisionValueSpec' | 'type.googleapis.com/google.actions.v2.ConfirmationValueSpec' | 'type.googleapis.com/google.actions.v2.DateTimeValueSpec' | 'type.googleapis.com/google.actions.v2.NewSurfaceValueSpec' | 'type.googleapis.com/google.actions.v2.RegisterUpdateValueSpec' | 'type.googleapis.com/google.actions.v2.SignInValueSpec' | 'type.googleapis.com/google.actions.v2.PlaceValueSpec' | 'type.googleapis.com/google.actions.v2.LinkValueSpec';
export declare type DialogSpec = 'type.googleapis.com/google.actions.v2.PlaceValueSpec.PlaceDialogSpec' | 'type.googleapis.com/google.actions.v2.LinkValueSpec.LinkDialogSpec';
/** @public */
export declare type Response = RichResponse | string | SimpleResponse | BasicCard | Suggestions | Image | Question<JsonObject>;
export interface ConversationResponse {
    richResponse: Api.GoogleActionsV2RichResponse;
    expectUserResponse: boolean;
    userStorage: string;
    expectedIntent?: Api.GoogleActionsV2ExpectedIntent;
}
export interface ConversationOptionsInit<TUserStorage> {
    storage?: TUserStorage;
}
export interface ConversationOptions<TUserStorage> {
    request: Api.GoogleActionsV2AppRequest;
    headers: Headers;
    init?: ConversationOptionsInit<TUserStorage>;
}
/** @public */
export declare class Conversation<TUserStorage> {
    /** @public */
    request: Api.GoogleActionsV2AppRequest;
    /** @public */
    headers: Headers;
    /** @public */
    responses: Response[];
    /** @public */
    expectUserResponse: boolean;
    /** @public */
    surface: Surface;
    /** @public */
    available: Available;
    /** @public */
    digested: boolean;
    /** @public */
    sandbox: boolean;
    /** @public */
    input: Input;
    /** @public */
    user: User<TUserStorage>;
    /** @public */
    arguments: Arguments;
    /** @public */
    device: Device;
    constructor(options: ConversationOptions<TUserStorage>);
    /** @public */
    add(...responses: Response[]): this;
    /** @public */
    ask(...responses: Response[]): this;
    /** @public */
    close(...responses: Response[]): this;
    /** @public */
    response(): ConversationResponse;
}
export interface ExceptionHandler<TUserStorage, TConversation extends Conversation<TUserStorage>> {
    (conv: TConversation, error: Error): Promise<any> | any;
}
