"use strict";
/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assistant_1 = require("../../assistant");
const conversation_1 = require("./conversation");
const common_1 = require("../../common");
/** @public */
class ActionsSdkConversation extends conversation_1.Conversation {
    constructor(options) {
        super({
            request: options.body,
            headers: options.headers,
        });
        const { body, init } = options;
        this.body = body;
        const { intent = '' } = this.body.inputs[0];
        const { conversation } = this.body;
        const { conversationToken } = conversation;
        this.intent = intent;
        this.data = conversationToken ? JSON.parse(conversationToken).data : ((init && init.data) || {});
        common_1.debug('Conversation', common_1.stringify(this, {
            request: null,
            headers: null,
            body: null,
        }));
    }
    serialize() {
        const { richResponse, expectUserResponse, userStorage, expectedIntent, } = this.response();
        const inputPrompt = {
            richInitialPrompt: richResponse,
        };
        const possibleIntents = [{
                intent: 'actions.intent.TEXT',
            }];
        if (expectedIntent) {
            possibleIntents.push(expectedIntent);
        }
        const expectedInput = {
            inputPrompt,
            possibleIntents,
        };
        const conversationToken = JSON.stringify({ data: this.data });
        return {
            expectUserResponse,
            expectedInputs: expectUserResponse ? [expectedInput] : undefined,
            finalResponse: expectUserResponse ? undefined : { richResponse },
            conversationToken,
            userStorage,
        };
    }
}
exports.ActionsSdkConversation = ActionsSdkConversation;
/** @public */
exports.actionssdk = (options = {}) => assistant_1.attach({
    intents: {},
    middlewares: [],
    intent(intent, handler) {
        this.intents[intent] = handler;
        return this;
    },
    catch(catcher) {
        this.catcher = catcher;
        return this;
    },
    catcher(conv, e) {
        throw e;
    },
    middleware(middleware) {
        this.middlewares.push(middleware);
        return this;
    },
    handler(body, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            const { init } = options;
            let conv = new ActionsSdkConversation({
                body,
                headers,
                init: init && init(),
            });
            for (const middleware of this.middlewares) {
                conv = middleware(conv);
            }
            const { intent } = conv;
            const traversed = {};
            let handler = intent;
            while (typeof handler !== 'function') {
                if (typeof handler === 'undefined') {
                    throw new Error(`Actions SDK IntentHandler not found for intent: ${intent}`);
                }
                if (traversed[handler]) {
                    throw new Error(`Circular intent map detected: "${handler}" traversed twice`);
                }
                traversed[handler] = true;
                handler = this.intents[handler];
            }
            try {
                yield handler(conv, conv.input.raw, conv.arguments.list[0]);
            }
            catch (e) {
                yield this.catcher(conv, e);
            }
            return {
                status: 200,
                body: conv.serialize(),
            };
        });
    },
}, options);
//# sourceMappingURL=actionssdk.js.map