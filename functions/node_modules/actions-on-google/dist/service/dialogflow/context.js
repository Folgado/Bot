"use strict";
/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
class ContextValues {
    constructor(outputContexts = [], session) {
        this.session = session;
        this.input = {};
        for (const context of outputContexts) {
            const name = context.name;
            const parameters = context.parameters;
            if (this.isV1(context)) {
                const lifespan = context.lifespan;
                this.input[name] = {
                    name,
                    lifespan,
                    parameters,
                };
                continue;
            }
            const lifespanCount = context.lifespanCount;
            const find = /([^/]+)?$/.exec(name);
            this.input[find ? find[0] : name] = {
                name,
                lifespan: lifespanCount,
                parameters,
            };
        }
        this.output = {};
    }
    isV1(context) {
        return typeof context.lifespan === 'number';
    }
    serialize() {
        return Object.keys(this.output).map((name) => {
            const { lifespan, parameters } = this.output[name];
            return {
                name: `${this.session}/contexts/${name}`,
                lifespanCount: lifespan,
                parameters,
            };
        });
    }
    serializeV1() {
        return Object.keys(this.output).map((name) => {
            const { lifespan, parameters } = this.output[name];
            return {
                name,
                lifespan,
                parameters,
            };
        });
    }
    /** @public */
    get(name) {
        return this.input[name];
    }
    /** @public */
    set(name, lifespan, parameters) {
        this.output[name] = {
            lifespan,
            parameters,
        };
    }
    /** @public */
    delete(name) {
        this.set(name, 0);
    }
    /** @public */
    [Symbol.iterator]() {
        return common_1.values(this.input).values();
    }
}
exports.ContextValues = ContextValues;
//# sourceMappingURL=context.js.map