/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
declare global  {
    namespace JSX {
        type Element = string;
        interface SpeakElement {
        }
        interface BreakElement {
            time?: string;
            strength?: 'x-weak' | 'weak' | 'medium' | 'strong' | 'x-strong' | 'none';
        }
        interface SayAsElement {
            'interpret-as': 'cardinal' | 'ordinal' | 'characters' | 'fraction' | 'expletive' | 'bleep' | 'unit' | 'verbatim' | 'spell-out' | 'date' | 'time' | 'telephone';
            format?: string;
            detail?: string;
        }
        interface AudioElement {
            src: string;
            clipBegin?: string;
            clipEnd?: string;
            speed?: string;
            repeatCount?: number;
            repeatDur?: string;
            soundLevel?: string;
        }
        interface DescElement {
        }
        interface PElement {
        }
        interface SElement {
        }
        interface SubElement {
            alias: string;
        }
        interface ProsodyElement {
            rate?: 'x-slow' | 'slow' | 'medium' | 'fast' | 'x-fast' | 'default';
            volume?: 'silent' | 'x-soft' | 'soft' | 'medium' | 'loud' | 'x-loud' | 'default';
            pitch?: 'x-low' | 'low' | 'medium' | 'high' | 'x-high' | 'default' | string;
        }
        interface EmphasisElement {
            level?: 'strong' | 'moderate' | 'none' | 'reduced';
        }
        interface ParElement {
        }
        interface SeqElement {
        }
        interface MediaElement {
            xmlId?: string;
            begin?: string;
            end?: string;
            repeatCount?: number;
            repeatDur?: string;
            soundLevel?: string;
            fadeInDur?: string;
            fadeOutDur?: string;
        }
        interface IntrinsicElements {
            speak: SpeakElement;
            break: BreakElement;
            'say-as': SayAsElement;
            audio: AudioElement;
            desc: DescElement;
            p: PElement;
            s: SElement;
            sub: SubElement;
            prosody: ProsodyElement;
            emphasis: EmphasisElement;
            par: ParElement;
            seq: SeqElement;
            media: MediaElement;
        }
    }
}
export interface Props {
    [key: string]: string | number;
}
export declare const ssml: ((template: TemplateStringsArray, ...inputs: string[]) => string) & {
    create: (tag: string, props: Props | null, ...children: string[]) => string;
};
