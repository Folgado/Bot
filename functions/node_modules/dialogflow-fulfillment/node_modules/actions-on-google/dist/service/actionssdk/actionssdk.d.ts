/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as Api from './api/v2';
import { ServiceBaseApp, AppOptions, AppHandler } from '../../assistant';
import { Conversation, ConversationOptionsInit, ExceptionHandler, Argument } from './conversation';
import { Headers } from '../../framework';
/** @public */
export declare type Intent = 'actions.intent.MAIN' | 'actions.intent.TEXT' | 'actions.intent.PERMISSION' | 'actions.intent.OPTION' | 'actions.intent.TRANSACTION_REQUIREMENTS_CHECK' | 'actions.intent.DELIVERY_ADDRESS' | 'actions.intent.TRANSACTION_DECISION' | 'actions.intent.CONFIRMATION' | 'actions.intent.DATETIME' | 'actions.intent.SIGN_IN' | 'actions.intent.NO_INPUT' | 'actions.intent.CANCEL' | 'actions.intent.NEW_SURFACE' | 'actions.intent.REGISTER_UPDATE' | 'actions.intent.CONFIGURE_UPDATES';
export declare type InputValueSpec = 'type.googleapis.com/google.actions.v2.PermissionValueSpec' | 'type.googleapis.com/google.actions.v2.OptionValueSpec' | 'type.googleapis.com/google.actions.v2.TransactionRequirementsCheckSpec' | 'type.googleapis.com/google.actions.v2.DeliveryAddressValueSpec' | 'type.googleapis.com/google.actions.v2.TransactionDecisionValueSpec' | 'type.googleapis.com/google.actions.v2.ConfirmationValueSpec' | 'type.googleapis.com/google.actions.v2.DateTimeValueSpec' | 'type.googleapis.com/google.actions.v2.NewSurfaceValueSpec' | 'type.googleapis.com/google.actions.v2.RegisterUpdateValueSpec' | 'type.googleapis.com/google.actions.v2.SignInValueSpec';
/** @public */
export interface ActionsSdkConversationOptions<TConvData, TUserStorage> {
    body: Api.GoogleActionsV2AppRequest;
    headers: Headers;
    init?: ActionsSdkConversationOptionsInit<TConvData, TUserStorage>;
}
export interface ActionsSdkConversationOptionsInit<TConvData, TUserStorage> extends ConversationOptionsInit<TUserStorage> {
    data?: TConvData;
}
/** @public */
export declare class ActionsSdkConversation<TConvData = {}, TUserStorage = {}> extends Conversation<TUserStorage> {
    /** @public */
    body: Api.GoogleActionsV2AppRequest;
    /** @public */
    intent: string;
    /** @public */
    data: TConvData;
    constructor(options: ActionsSdkConversationOptions<TConvData, TUserStorage>);
    serialize(): Api.GoogleActionsV2AppResponse;
}
/** @public */
export interface ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation extends ActionsSdkConversation<TConvData, TUserStorage>, TArgument extends Argument> {
    (conv: TConversation, input: string, argument: TArgument): Promise<any> | any;
}
export interface ActionSdkIntentHandlers {
    [intent: string]: ActionsSdkIntentHandler<{}, {}, ActionsSdkConversation<{}, {}>, string | Argument> | string | undefined;
}
/** @public */
export interface ActionsSdkMiddleware<TConversationPlugin extends ActionsSdkConversation<{}, {}>> {
    (conv: ActionsSdkConversation<{}, {}>): ActionsSdkConversation<{}, {}> & TConversationPlugin;
}
/** @public */
export interface ActionsSdkApp<TConvData, TUserStorage, TConversation extends ActionsSdkConversation<TConvData, TUserStorage>> extends ServiceBaseApp {
    intents: ActionSdkIntentHandlers;
    catcher: ExceptionHandler<TUserStorage, TConversation>;
    /** @public */
    intent<TArgument extends Argument>(intent: Intent, handler: ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation, TArgument> | string): this;
    /** @public */
    catch(catcher: ExceptionHandler<TUserStorage, TConversation>): this;
    middlewares: ActionsSdkMiddleware<ActionsSdkConversation<{}, {}>>[];
    /** @public */
    middleware<TConversationPlugin extends ActionsSdkConversation<{}, {}>>(middleware: ActionsSdkMiddleware<TConversationPlugin>): this;
}
/** @public */
export interface ActionsSdk {
    /** @public */
    <TConvData, TUserStorage, Conversation extends ActionsSdkConversation<TConvData, TUserStorage> = ActionsSdkConversation<TConvData, TUserStorage>>(options?: ActionsSdkOptions<TConvData, TUserStorage>): AppHandler & ActionsSdkApp<TConvData, TUserStorage, Conversation>;
    /** @public */
    <Conversation extends ActionsSdkConversation<{}, {}> = ActionsSdkConversation<{}, {}>>(options?: ActionsSdkOptions<{}, {}>): AppHandler & ActionsSdkApp<{}, {}, Conversation>;
}
/** @public */
export interface ActionsSdkOptions<TConvData, TUserStorage> extends AppOptions {
    /** @public */
    init?: () => ActionsSdkConversationOptionsInit<TConvData, TUserStorage>;
}
/** @public */
export declare const actionssdk: ActionsSdk;
