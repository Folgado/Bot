"use strict";
/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../common");
class LinkOutSuggestion {
    /** @public */
    constructor(options) {
        this.destinationName = options.name;
        this.url = options.url;
    }
}
exports.LinkOutSuggestion = LinkOutSuggestion;
class SimpleResponse {
    /** @public */
    constructor(options) {
        if (typeof options === 'string') {
            this.textToSpeech = options;
            return;
        }
        this.textToSpeech = options.speech;
        this.ssml = options.ssml;
        this.displayText = options.text;
    }
}
exports.SimpleResponse = SimpleResponse;
class Image {
    /** @public */
    constructor(option) {
        this.url = option.url;
        this.accessibilityText = option.alt;
        this.height = option.height;
        this.width = option.width;
    }
}
exports.Image = Image;
class OpenUrlAction {
    /** @public */
    constructor(options) {
        this.url = options.url;
    }
}
exports.OpenUrlAction = OpenUrlAction;
class Button {
    /** @public */
    constructor(options) {
        this.title = options.title;
        if (options.url) {
            this.openUrlAction = { url: options.url };
        }
        if (options.action) {
            this.openUrlAction = options.action;
        }
    }
}
exports.Button = Button;
class BasicCard {
    /** @public */
    constructor(options) {
        this.title = options.title;
        this.subtitle = options.subtitle;
        this.formattedText = options.text;
        this.image = options.image;
        const { buttons } = options;
        if (buttons) {
            this.buttons = common_1.toArray(buttons);
        }
        this.imageDisplayOptions = options.display;
    }
}
exports.BasicCard = BasicCard;
class StructuredResponse {
}
exports.StructuredResponse = StructuredResponse;
class RichResponse {
    /** @public */
    constructor(options, ...items) {
        this.items = [];
        if (!options) {
            return;
        }
        if (Array.isArray(options)) {
            this.add(...options);
            return;
        }
        if (this.isOptions(options)) {
            if (options.items) {
                this.add(...options.items);
            }
            const { link, suggestions } = options;
            this.linkOutSuggestion = link;
            if (suggestions) {
                if (Array.isArray(suggestions)) {
                    this.addSuggestion(...suggestions);
                }
                else {
                    this.addSuggestion(suggestions);
                }
            }
            return;
        }
        this.add(options, ...items);
    }
    isOptions(options) {
        const test = options;
        return typeof test.link === 'object' ||
            Array.isArray(test.items) ||
            Array.isArray(test.suggestions) ||
            test.suggestions instanceof Suggestions;
    }
    /** @public */
    add(...items) {
        for (const item of items) {
            if (typeof item === 'string') {
                this.add(new SimpleResponse(item));
                continue;
            }
            if (item instanceof LinkOutSuggestion) {
                this.linkOutSuggestion = item;
                continue;
            }
            if (item instanceof SimpleResponse) {
                this.items.push({ simpleResponse: item });
                continue;
            }
            if (item instanceof BasicCard) {
                this.items.push({ basicCard: item });
                continue;
            }
            if (item instanceof StructuredResponse) {
                this.items.push({ structuredResponse: item });
                continue;
            }
            this.items.push(item);
        }
        return this;
    }
    /** @public */
    addSuggestion(...suggestions) {
        if (!this.suggestions) {
            this.suggestions = [];
        }
        for (const suggestion of suggestions) {
            if (typeof suggestion === 'string') {
                this.addSuggestion(new Suggestions(suggestion));
                continue;
            }
            this.suggestions.push(...suggestion.suggestions);
        }
        return this;
    }
}
exports.RichResponse = RichResponse;
/** @public */
class Suggestions {
    /** @public */
    constructor(...suggestions) {
        /** @public */
        this.suggestions = [];
        for (const suggestion of suggestions) {
            this.add(...common_1.toArray(suggestion));
        }
    }
    /** @public */
    add(...suggestions) {
        this.suggestions.push(...suggestions.map(title => ({ title })));
        return this;
    }
}
exports.Suggestions = Suggestions;
//# sourceMappingURL=response.js.map