/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as Api from './api/v2';
import * as ApiV1 from './api/v1';
import * as ActionsApi from '../actionssdk/api/v2';
import { ServiceBaseApp, AppOptions, AppHandler } from '../../assistant';
import { Conversation, ConversationOptionsInit, ExceptionHandler, Argument } from '../actionssdk';
import { Headers } from '../../framework';
import { ProtoAny } from '../../common';
import { Contexts, ContextValues } from './context';
export interface SystemIntent {
    intent: string;
    data: ProtoAny;
}
export interface GoogleAssistantResponse {
    expectUserResponse: boolean;
    noInputPrompts?: ActionsApi.GoogleActionsV2SimpleResponse[];
    isSsml?: boolean;
    richResponse: ActionsApi.GoogleActionsV2RichResponse;
    systemIntent?: SystemIntent;
    userStorage?: string;
}
export interface PayloadGoogle {
    google: GoogleAssistantResponse;
}
/** @public */
export interface Parameters {
    /** @public */
    [parameter: string]: string | Object | undefined;
}
/** @public */
export interface DialogflowConversationOptions<TConvData, TUserStorage> {
    /** @public */
    body: Api.GoogleCloudDialogflowV2WebhookRequest | ApiV1.DialogflowV1WebhookRequest;
    /** @public */
    headers: Headers;
    /** @public */
    init?: DialogflowConversationOptionsInit<TConvData, TUserStorage>;
}
/** @public */
export declare class DialogflowConversation<TConvData = {}, TUserStorage = {}, TContexts extends Contexts = Contexts> extends Conversation<TUserStorage> {
    /** @public */
    body: Api.GoogleCloudDialogflowV2WebhookRequest | ApiV1.DialogflowV1WebhookRequest;
    /** @public */
    action: string;
    /** @public */
    intent: string;
    /** @public */
    parameters: Parameters;
    /** @public */
    contexts: ContextValues<TContexts>;
    /** @public */
    query: string;
    /** @public */
    data: TConvData;
    /** @public */
    version: number;
    /** @public */
    constructor(options: DialogflowConversationOptions<TConvData, TUserStorage>);
    private static isV1(body);
    private static getRequest(body);
    /** @public */
    serialize(): Api.GoogleCloudDialogflowV2WebhookResponse | ApiV1.DialogflowV1WebhookResponse;
}
/** @public */
export interface DialogflowIntentHandler<TConvData, TUserStorage, TContexts extends Contexts, TConversation extends DialogflowConversation<TConvData, TUserStorage, TContexts>, TParameters extends Parameters, TArgument extends Argument> {
    (conv: TConversation, params: TParameters, argument: TArgument): Promise<any> | any;
}
export interface DialogflowIntentHandlers {
    [event: string]: DialogflowIntentHandler<Contexts, {}, {}, DialogflowConversation<{}, {}>, Parameters, Argument> | string | undefined;
}
/** @public */
export interface DialogflowMiddleware<TConversationPlugin extends DialogflowConversation<{}, {}, Contexts>> {
    (conv: DialogflowConversation<{}, {}, Contexts>): DialogflowConversation<{}, {}, Contexts> & TConversationPlugin;
}
/** @public */
export interface DialogflowApp<TConvData, TUserStorage, TContexts extends Contexts, TConversation extends DialogflowConversation<TConvData, TUserStorage, TContexts>> extends ServiceBaseApp {
    intents: DialogflowIntentHandlers;
    /** @public */
    intent<TParameters extends Parameters>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, TParameters, Argument> | string): this;
    /** @public */
    intent<TArgument extends Argument>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, Parameters, TArgument> | string): this;
    /** @public */
    intent<TParameters extends Parameters, TArgument extends Argument>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, TParameters, TArgument> | string): this;
    catcher: ExceptionHandler<TUserStorage, TConversation>;
    /** @public */
    catch(catcher: ExceptionHandler<TUserStorage, TConversation>): this;
    middlewares: DialogflowMiddleware<DialogflowConversation<{}, {}, Contexts>>[];
    /** @public */
    middleware<TConversationPlugin extends DialogflowConversation<{}, {}, Contexts>>(middleware: DialogflowMiddleware<TConversationPlugin>): this;
}
export interface DialogflowConversationOptionsInit<TConvData, TUserStorage> extends ConversationOptionsInit<TUserStorage> {
    data?: TConvData;
}
/** @public */
export interface DialogflowVerification {
    /** @public */
    [key: string]: string;
}
/** @public */
export interface DialogflowOptions<TConvData, TUserStorage> extends AppOptions {
    init?: () => DialogflowConversationOptionsInit<TConvData, TUserStorage>;
    verification?: DialogflowVerification;
}
/** @public */
export interface Dialogflow {
    /** @public */
    <TConvData, TUserStorage, TContexts extends Contexts = Contexts, Conversation extends DialogflowConversation<TConvData, TUserStorage, TContexts> = DialogflowConversation<TConvData, TUserStorage, TContexts>>(options?: DialogflowOptions<TConvData, TUserStorage>): AppHandler & DialogflowApp<TConvData, TUserStorage, TContexts, Conversation>;
    /** @public */
    <TContexts extends Contexts, Conversation extends DialogflowConversation<{}, {}, TContexts> = DialogflowConversation<{}, {}, TContexts>>(options?: DialogflowOptions<{}, {}>): AppHandler & DialogflowApp<{}, {}, TContexts, Conversation>;
    /** @public */
    <TConversation extends DialogflowConversation<{}, {}> = DialogflowConversation<{}, {}>>(options?: DialogflowOptions<{}, {}>): AppHandler & DialogflowApp<{}, {}, Contexts, TConversation>;
}
/** @public */
export declare const dialogflow: Dialogflow;
